# #################################################################################################################
# GitHub workflow action file
# Run to check package structure and test files under pip install . vs  pip install -e .
# Usage
# Python packages can use different structures to hold the package, subpackages and associated tests
# These can impact the behaviour of tests under a development based installation vs a full user installation
# This workflow outputs useful information for debugging any such problems by installing the system twice and
# reporting the source location and the results of running a simple test script against each installation
# Various testing frameworks and packages could be used. Pytest, coverage and pytest-cov were selected here.
# This workflow will fail if the package test structure does not allow coverage to run against a full user install
# Expected behaviour = test always passes for dev build, but may fails on a full install build if there are
# problems with the package structure or the location or packaging of the tests directory
# #################################################################################################################

# Solution if this workflow fails:
#   - Check if tests are subpackage to the main package, if placed at root does tests have init?

# Name for workflow (also displayed on the associated badges)
name: test-structure

# on: controls when the action will run. Triggers the workflow on push or pull request events
# Limits run only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Set environment variables so this workflow action is easy to re-use in other repos
env:
  REPO_NAME: cmatools
  PACKAGE: cmatools
  CONDA_ENV: cmatools-tests-env # Name is set in the $ENV_FILE
  ENV_FILE: environment_tests.yml # File to list environment dependencies

jobs:
  test-structure:
    timeout-minutes: 10 # Limit total time use of the workflow action, in case of problems
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # checkout code to the runner workspace root
    - name: Install dependencies
      run: |
        conda update conda
        conda env create -f "${ENV_FILE}"

    - name: Install the package - development install
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate "${CONDA_ENV}"
        pip  install -e .
    - name: Run unit tests for version to check package test structure is working (development install)
      id: dev
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate "$CONDA_ENV"
        cd scripts/tests
        #chmod +x test-unit-version.sh
        #./test-unit-version.sh
        #echo "Simple test: version has run"
        echo "Summary of package installation (pip show)"
        pip show "$PACKAGE"
        echo " --- "
        # Run pytest with pytest-cov to exaime the code coverage from one simple unit test (version)
        # Capture standard error to shell script variable, discard standard out to dev null
        #error=$(pytest --cov-report= --cov="${GITHUB_WORKSPACE}"/cmatools "${GITHUB_WORKSPACE}"/tests/unit/version  2>&1 > /dev/null)
        error=$(pytest --cov-report= --cov="${PACKAGE}" "${GITHUB_WORKSPACE}"/tests/unit  2>&1 > /dev/null)
        echo " --- "
        echo "${error}"
        echo " --- "
        # Capture the error to a named step output (as error)
        echo "::set-output name=error::${error}"
        # Set an expected, known error message, as potentially generated from coverage (as message)
        # This is a bit of a hack, it works because we know the expected error message if the dir structure does
        # not allow the coverage test to complete
        echo "::set-output name=message::warning: No data was collected"
    - name: Check for error, exit if found (dev)
      # Fail the job and exit if code style still needs formatting
      if: contains(steps.dev.outputs.error , steps.dev.outputs.message)
      run: |
        echo steps.dev.outputs.error
        echo "Package test structure causes warnings, no output for pytest coverage"
        echo "Test fails - for a dev install"
        exit 1

    - name: Un-install the package
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate "$CONDA_ENV"
        pip uninstall -y "${PACKAGE}"

    - name: Install the package - full install
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate $CONDA_ENV
        pip  install .
    - name: Run unit tests for version to check package test structure is working (full install)
      id: full
      run: |
        source /usr/share/miniconda/etc/profile.d/conda.sh
        conda activate "$CONDA_ENV"
        #cd scripts/tests
        #chmod +x test-unit-version.sh
        #./test-unit-version.sh
        #echo "Simple test: version has run"
        echo "Summary of package installation (pip show)"
        pip show "$PACKAGE"
        echo " --- "
        # Run pytest with pytest-cov to exaime the code coverage from one simple unit test (version)
        # Capture standard error to shell script variable, discard standard out to dev null
        #error=$(pytest --cov-report= --cov=$GITHUB_WORKSPACE/cmatools $GITHUB_WORKSPACE/tests/unit/version  2>&1 > /dev/null)
        error=$(pytest --cov-report= --cov=$PACKAGE $GITHUB_WORKSPACE/tests/unit 2>&1 > /dev/null)
        echo " --- "
        echo "${error}"
        echo " --- "
        # Capture the error to a named step output (as error)
        echo "::set-output name=error::${error}"
        # Set an expected, known, error message potentially generate from coverage (as message)
        # This is a bit of a hack, it works because we know the expected error message if the dir structure does
        # not allow the coverage test to complete
        echo "::set-output name=message::warning: No data was collected"
    - name: Check for error, exit if found (full install)
      # Fail the job and exit if the unit test - with coverage - does not complete
      # Returns true if search contains item. - contains(search, item)
      if: contains(steps.full.outputs.error , steps.full.outputs.message)
      run: |
        echo steps.full.outputs.error
        echo "Package test structure causes warnings, no output for pytest coverage"
        echo "Test fails - for a full install"
        exit 1